Git工作机制：
	1.几个重要的区域：
		工作区：写代码的地方    
		暂存区：暂存代码的地方，通过git add将工作区的代码存到暂存区（此时还未生成版本信息）
		本地库：本地git仓库，通过git commit将暂存区的代码提交到本地库（提交之后就永久存在了，即使删掉也有历史版本，除非把本地库删除）
		远程库（代码托管中心）：基于网络服务的远程代码库
			基于局域网：GitLab
			基于互联网：GitHub、Gitee
	2.不常用命令：
		git config --global user.name xxx
		git config --global user.email xxxx
		git branch -v：查看所有分支
		git branch [name]：创建分支
	3.频率中等的命令：
		git init：初始化本地库
	4. 常用命令：
		git add [filename]：将文件提交到暂存区
		git rm --cached [filename]：将暂存区的文件删除(变成未跟踪的状态)
		git commit -m 'commit message' [filename]：将暂存区的文件提交到本地库。使用-m携带提交日志。
			 会清空暂存区
		git reflog：查看版本历史
		git log：查看详细日志
		git reset --hard [版本号]：回到某一版本。注意，是全盘回滚，包括HEAD指针指向的版本、暂存区和工作区。切记，一定要将当前的工作区代码提交，不然回滚之后就找不到了。
			不加--hard时，仅修改HEAD指针指向的版本
		git checkout [分支名]：切换到分支
		git merge [分支名]：合并指定分支到该分支，合并不会修改合过来的分支

关于分支：
	1.分支的目的：多个工作内容并行推进
	2.冲突的产生：两个分支对同一个文件进行不同的修改，git无法决定该使用哪个
	3.冲突的解决：
		打开产生冲突的文件，定位到冲突位置，冲突位置会产生如下标记：
			<<<<<<<HEAD：代表当前分支的代码起始
			===========：代表当前分支的代码结束，或者合过来的分支的代码起始
			>>>>>>>>>>XX：代表合过来的分支的代码结束
		手动删除不需要的代码、添加到暂存区、提交即可（此时提交必须不加文件名）



关于.git目录：
